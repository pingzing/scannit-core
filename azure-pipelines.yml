variables:
  # Found through trial-and-error. May not be stable?
  ndk_home: /usr/local/lib/android/sdk/ndk-bundle 

strategy:
  matrix:
    linux:
      imageName: "ubuntu-16.04"  
      target: x86_64-unknown-linux-gnu 
      excludes: none         
    linux_32_(cross):
      imageName: "ubuntu-16.04"
      target: i686-unknown-linux-gnu  
      excludes: scannit-core-cli           
    mac:
      imageName: "macos-10.13"
      target: x86_64-apple-darwin    
      excludes: none  
    windows:
      imageName: "vs2017-win2016"
      target: x86_64-pc-windows-msvc   
      excludes: none   
    windows_32_(cross):
      imageName: "vs2017-win2016"
      target: i686-pc-windows-msvc   
      excludes: none   
    android_(cross):
      imageName: "ubuntu-16.04"
      target: aarch64-linux-android   
      targetCapitalized: AARCH64_LINUX_ANDROID   
      arName: aarch64-linux-android-ar
      linkerName: aarch64-linux-android28-clang      
      excludes: scannit-core-cli
    android_32_(cross):
      imageName: "ubuntu-16.04"
      target: arm-linux-androideabi   
      arName: arm-linux-androideabi-ar
      linkerName: armv7a-linux-androideabi28-clang
      targetCapitalized: ARM_LINUX_ANDROIDEABI
      excludes: scannit-core-cli
    
pool:
  vmImage: $(imageName)

steps:

  # Update the version number in the main Cargo.toml.
  - task: VersionAssemblies@2
    inputs:
      filePattern: 'Cargo.toml'
      versionSource: 'buildNumber'
      versionFormat: 'custom'
      customBuildRegex: '(\d+.\d+.)(\d+)'
      replaceVersionFormat: 'custom'
      customReplaceRegex: 'version = "\d+.\d+.\d+'
      replacePrefix: 'version = "'

  # Update version number in scannit-core-ffi
  - task: VersionAssemblies@2
    inputs:
      sourcePath: 'scannit-core-ffi'
      filePattern: 'Cargo.toml'
      versionSource: 'buildNumber'
      versionFormat: 'custom'
      customBuildRegex: '(\d+.\d+.)(\d+)'
      replaceVersionFormat: 'custom'
      customReplaceRegex: 'version = "\d+.\d+.\d+'
      replacePrefix: 'version = "'

  # Update scannit-core dependency version number in scannit-core-ffi
  - task: VersionAssemblies@2
    inputs:
      sourcePath: 'scannit-core-ffi'
      filePattern: 'Cargo.toml'
      versionSource: 'buildNumber'
      versionFormat: 'custom'
      customBuildRegex: '(\d+.\d+.)(\d+)'
      replaceVersionFormat: 'custom'
      customReplaceRegex: 'scannit-core = {path = "../", version = "\d+.\d+.\d+'
      replacePrefix: scannit-core = {path = "../", version = "'

# Non-Windows install rust
  - script:  |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: Install Rust (*NIX)
    condition: ne( variables['Agent.OS'], 'Windows_NT' ) 

# Windows install Rust
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain stable
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: Install Rust (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: rustup target add $(target)
    displayName: Rustup add target

# 32-bit GCC toolchain for 32-bit Linux
  - script: sudo apt install gcc-multilib
    displayName: Install 32-bit GCC
    condition: eq( variables['target'], 'i686-unknown-linux-gnu')

# Library dependency for building the CLI tool on Linux
# Note that we don't build the CLI target at all on non-desktop platforms.
  - script: sudo apt-get install libpcsclite-dev
    displayName: Install libpsclite-dev (Linux only)
    condition: and(eq(variables['Agent.OS'], 'Linux'), not( contains( variables['excludes'], 'scannit-core-cli' ) ))

# Android linker settings for cross-compiling
  - script: |
      echo "##vso[task.setvariable variable=CARGO_TARGET_$(targetCapitalized)_AR;]$(ndk_home)/toolchains/llvm/prebuilt/linux-x86_64/bin/$(arName)"      
      echo "##vso[task.setvariable variable=CARGO_TARGET_$(targetCapitalized)_LINKER;]$(ndk_home)/toolchains/llvm/prebuilt/linux-x86_64/bin/$(linkerName)"      
    displayName: Set Android Linker
    condition: contains( variables['target'], 'android' )

  - script: cargo build --all --target $(target) --exclude $(excludes) --release
    displayName: Cargo build

  - script: cargo test --all --exclude $(excludes)
    displayName: Cargo test

  - task: ArchiveFiles@2
    displayName: Zip artifacts
    inputs:
      rootFolderOrFile: 'target/$(target)/release'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/scannit-core_$(Build.BuildId)_$(target).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Publish zip file
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'