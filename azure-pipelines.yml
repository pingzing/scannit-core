strategy:
  matrix:
    linux:
      imageName: "ubuntu-16.04"  
      target: x86_64-unknown-linux-gnu    
      build_cli: true
    linux_32:
      imageName: "ubuntu-16.04"
      target: i686-unknown-linux-gnu       
      build_cli: true     
    mac:
      imageName: "macos-10.13"
      target: x86_64-apple-darwin
      build_cli: true
    windows:
      imageName: "vs2017-win2016"
      target: x86_64-pc-windows-msvc
      build_cli: true
    windows_32:
      imageName: "vs2017-win2016"
      target: i686-pc-windows-msvc
      build_cli: true
    android:
      imageName: "ubuntu-16.04"
      target: aarch64-linux-android
      build_cli: false
    android_32:
      imageName: "ubuntu-16.04"
      target: arm-linux-androideabi
      build_cli: false
    

pool:
  vmImage: $(imageName)

steps:
  - script:  |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: Install Rust (*NIX)
    condition: ne( variables['Agent.OS'], 'Windows_NT' ) 

  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain stable
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: Install Rust (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: sudo apt-get install libpcsclite-dev
    displayName: Install libpsclite-dev (Linux only)
    condition: and( eq(variables['build_cli'], true), eq(variables['Agent.OS'], 'Linux'))

  - script: cargo build --all
    displayName: Cargo build

  - script: cargo test --all
    displayName: Cargo test